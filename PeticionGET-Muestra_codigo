CURLcode peticionGET(tRespuesta* respuesta, const char* path){

    long codigoHTTP = 0;
    CURLcode res;
    CURL* curl;
    // Inicializar el manejo de curl
    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();

    if (!curl)
        return CURLE_FAILED_INIT;

    // Establecer la URL de la solicitud GET
    curl_easy_setopt(curl, CURLOPT_URL, path);

    // Establecer la funci√≥n de retorno de llamada para manejar la respuesta
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, respuesta);

    // Realizar la solicitud HTTP GET
    res = curl_easy_perform(curl);

    if (res == CURLE_OK)
    {
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &codigoHTTP);
        printf("Codigo HTTP recibido: %ld\n", codigoHTTP);

        if (codigoHTTP == 200) {
            printf("La API respondio 200 OK\n");
        } else if (codigoHTTP == 400) {
            printf("La API respondio 400 Bad Request\n");
        } else {
            printf("La API respondio otro codigo: %ld\n", codigoHTTP);
        }
    } else
    {
        fprintf(stderr, "Error en la solicitud: %s\n", curl_easy_strerror(res));
    }
    curl_easy_cleanup(curl);
    curl_global_cleanup();
    return res;
}
